{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","console","log","this","props","business","className","href","url","target","src","imageSrc","alt","name","address","city","state","zipCode","phone","rating","reviewCount","React","Component","BusinessList","undefined","businesses","length","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","searchYelp","event","value","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","required","Yelp","search","fetch","method","mode","headers","then","response","json","jsonResponse","image_url","address1","zipcode","zip_code","display_phone","review_count","App","require","config","error","message","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7fb015f.chunk.js","sourcesContent":["import React from \"react\";\nimport  \"./Business.css\";\n\nclass Business extends React.Component{\n\n    render(){\n       console.log(this.props.business);\n      \n        return (<div className=\"Business\">\n        <div className=\"image-container\">\n        <a href={this.props.business.url} target = {\"_blank\"}><img src={this.props.business.imageSrc} alt=''/></a>\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{this.props.business.state}{this.props.business.zipCode}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.phone}</h3>\n            <h3 className=\"rating\">Rating: {this.props.business.rating}</h3>\n            <p>{this.props.business.reviewCount} Reviews</p>\n          </div>\n        </div>\n      </div>);\n    }\n}\n\nexport default Business;","import React from \"react\";\nimport \"./BusinessList.css\";\nimport Business from \"../Business/Business\";\n\nclass BusinessList extends React.Component {\n    render() {\n        if (\n            this.props.businesses === undefined ||\n            this.props.businesses.length === 0\n        ) {\n            return <h1>No results</h1>;\n        } else {\n            return (\n                <div className=\"BusinessList\">\n                    {this.props.businesses.map((business) => {\n                        return (\n                            <Business business={business} key={business.id} />\n                        );\n                    })}\n                </div>\n            );\n        }\n    }\n}\n\nexport default BusinessList;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nconst sortByOptions = {\n  \"Best Match\": \"best_match\",\n  \"Highest Rated\": \"rating\",\n  \"Most Reviewed\": \"review_count\",\n};\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: \"\", location: \"\", sortBy: \"best_match\" };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return \"active\";\n    } else {\n      return \" \";\n    }\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({ sortBy: sortByOption }, () => {\n      this.props.searchYelp(\n        this.state.term,\n        this.state.location,\n        this.state.sortBy\n      );\n    });\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  handleLocationChange(event) {\n    this.setState({ location: event.target.value });\n  }\n\n  handleSearch(event) {\n    if (this.state.location.length === 0) {\n      return null;\n    } else {\n      this.props.searchYelp(\n        this.state.term,\n        this.state.location,\n        this.state.sortBy\n      );\n      event.preventDefault();\n    }\n  }\n\n  renderSortByOptions() {\n    return Object.keys(sortByOptions).map((sortByOption) => {\n      let sortByOptionValue = sortByOptions[sortByOption];\n\n      return (\n        <li\n          key={sortByOptionValue}\n          className={this.getSortByClass(sortByOptionValue)}\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n        >\n          {sortByOption}\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>{this.renderSortByOptions()}</ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input\n            placeholder=\"Search Businesses or Food\"\n            onChange={this.handleTermChange}\n            required\n          />\n          <input\n            placeholder=\"Located Where?\"\n            onChange={this.handleLocationChange}\n            required\n          />\n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearch}>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","const Yelp = {\n    search(term, location, sortBy) {\n        return fetch(\n            `https://goodeats-api.herokuapp.com/?term=${term}&location=${location}&sort_by=${sortBy}`,\n            {\n                method: \"GET\",\n                mode: \"cors\",\n                headers: { \"Content-Type\": \"application/json\" },\n            }\n        )\n            .then((response) => {\n                console.log(response);\n                return response.json();\n            })\n            .then((jsonResponse) => {\n                if (jsonResponse.businesses) {\n                    if (jsonResponse.businesses.length === 0) {\n                        return [];\n                    }\n\n                    return jsonResponse.businesses.map((business) => {\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipcode: business.location.zip_code,\n                            phone: business.display_phone,\n                            rating: business.rating,\n                            reviewCount: business.review_count,\n                            url: business.url,\n                        };\n                    });\n                }\n            });\n    },\n};\nexport default Yelp;\n//\n","import React from \"react\";\nimport \"./App.css\";\nimport BusinessList from \"./components/BusinessList/BusinessList.js\";\nimport SearchBar from \"./components/SearchBar/SearchBar.js\";\nimport Yelp from \"./util/Yelp\";\nconst dotenv = require(\"dotenv\").config();\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { businesses: [] };\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n\n    searchYelp(term, location, sortBy) {\n        Yelp.search(term, location, sortBy).then((businesses) => {\n            try {\n                this.setState({ businesses: businesses });\n            } catch (error) {\n                if (\n                    this.state.businesses.length === 0 ||\n                    this.state.businesses === undefined\n                ) {\n                    this.setState({ businesses: error.message });\n                }\n            }\n        });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Good Eats</h1>\n                <SearchBar searchYelp={this.searchYelp} />\n                <BusinessList businesses={this.state.businesses} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}